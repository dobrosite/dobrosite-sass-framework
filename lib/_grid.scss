/**
 * Сетка.
 */
@import "settings";

/**
 * Список размеров отступов.
 *
 * @internal
 */
$grid-space-size-list: half small normal large x-large;

/**
 * Возвращает размер отступа в соответствии с сеткой.
 *
 * @param $size Размер отступа: half, small, normal, large или x-large.
 *
 * @return Размер в px.
 *
 * @since 0.10.0
 */
@function grid-space($size) {
    $iterations: index($grid-space-size-list, $size);
    @if $iterations == null {
        $iterations: index($grid-space-size-list, normal);
    }

    $result: $grid-base-size;

    @for $i from 1 to $iterations {
        $result: $result * $grid-ratio;
    }

    @return $result;
}

/**
 * Возвращает размер по сетке.
 *
 * @param $size Целое число (1, 2, 3…), задающее шаг размера сетки.
 *
 * @return Размер в px.
 *
 * @deprecated С 0.10.0 объявлена устаревшей. Вместо неё следует использовать grid-space.
 * @since 0.7.0
 */
@function grid-size($size) {

    @warn 'Function grid-size deprecated. Use grid-space instead.';

    $size: round($size);

    @if $size < 1 {
        @return 0;
    }

    $result: $grid-base-size;

    @for $i from 1 to $size {
        $result: $result * $grid-ratio;
    }

    @return $result;
}

/**
 * Задаёт элементу внутренние отступы, кратные размеру сетки.
 *
 * @deprecated С 0.10.0 объявлена устаревшей. Вместо неё следует использовать grid-space.
 *
 @since 0.7.0
 */
@mixin grid-padding($values) {

    @warn 'Mixin grid-size deprecated. Use grid-space function instead.';

    @if length($values) == 1 {
        padding: grid-size(nth($values, 1));
    } @else if length($values) == 2 {
        padding: grid-size(nth($values, 1)) grid-size(nth($values, 2));
    } @else if length($values) == 3 {
        padding: grid-size(nth($values, 1)) grid-size(nth($values, 2)) grid-size(nth($values, 3));
    } @else {
        padding: grid-size(nth($values, 1)) grid-size(nth($values, 2)) grid-size(nth($values, 3)) grid-size(nth($values, 4));
    }
}
